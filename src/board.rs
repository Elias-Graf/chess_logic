use std::mem;

use crate::{
    piece::{DIR_EAST, DIR_NORTH, DIR_OFFSETS, DIR_SOUTH, DIR_WEST, TO_EDGE_OFFSETS},
    Color, Piece,
};

pub type Move = (usize, usize);

// TODO: Consider refactoring to use `i8` everywhere and save a bunch of casting.

#[derive(Clone)]
pub struct Board {
    pub can_black_castle_king_side: bool,
    pub can_black_castle_queen_side: bool,
    pub can_white_castle_king_side: bool,
    pub can_white_castle_queen_side: bool,
    pub opponent_color: Color,
    pub piece_eligible_for_en_passant: Vec<(usize, usize)>,
    pub poses: [Option<PieceInstance>; Self::SIZE as usize],
    pub promote_idx: Option<usize>,
    pub you_color: Color,
}

impl Board {
    pub const HEIGHT: usize = 8;
    pub const WIDTH: usize = 8;
    pub const SIZE: usize = Self::HEIGHT * Self::WIDTH;

    fn check_and_add_en_passant_eligibility(
        &mut self,
        src_ins: &PieceInstance,
        src_idx: usize,
        hit_idx: usize,
    ) {
        if src_ins.piece != Piece::Pawn {
            return;
        }

        let src_y = src_idx / Self::WIDTH;
        let hit_y = hit_idx / Self::WIDTH;

        let move_could_result_in_en_passant = src_y.abs_diff(hit_y) == 2;
        if !move_could_result_in_en_passant {
            return;
        }

        for hit_pos in [
            (hit_idx as i8 + DIR_OFFSETS[DIR_WEST]) as usize,
            (hit_idx as i8 + DIR_OFFSETS[DIR_EAST]) as usize,
        ] {
            if let Some(ins) = self.get(hit_pos) {
                if ins.color != src_ins.color {
                    self.piece_eligible_for_en_passant.push((hit_pos, hit_idx));
                }
            }
        }
    }

    fn check_and_execute_castle(
        &mut self,
        src_ins: &PieceInstance,
        src_idx: usize,
        hit_idx: usize,
    ) {
        if !matches!(src_ins.piece, Piece::King) {
            return;
        }

        if src_idx.abs_diff(hit_idx) != 2 {
            return;
        }

        let king_move_dir = match src_idx as i8 - hit_idx as i8 > 0 {
            true => DIR_WEST,
            false => DIR_EAST,
        };

        let rook_src_idx = (src_idx as i8
            + (TO_EDGE_OFFSETS[src_idx][king_move_dir] as i8) * DIR_OFFSETS[king_move_dir])
            as usize;
        let rook_ins = self.replace_pos(rook_src_idx, None);
        let rook_des_idx = (hit_idx as i8 - DIR_OFFSETS[king_move_dir]) as usize;

        self.set(rook_des_idx, rook_ins);
    }

    fn check_and_execute_en_passant(&mut self, src_ins: &PieceInstance, hit_idx: usize) {
        if matches!(src_ins.piece, Piece::Pawn) && matches!(self.get(hit_idx), None) {
            let idx_behind_hit =
                ((hit_idx as i8) - DIR_OFFSETS[Self::get_attack_dir_of(&src_ins.color)]) as usize;

            self.set(idx_behind_hit, None);
        }
    }

    /// Execute a move.
    /// Notably this does not check the move's validity, (if you want to do that use
    /// [`Piece::is_valid_move()`]). **However**, this function needs to check if
    /// given move is a special one (en passant or castle). So calling with invalid
    /// moves might result in severe side effects and crash the program.
    /// As an API consumer, it is advisable to only call with moves generated by
    /// [`Piece::get_moves_for_piece_at()`].
    ///
    /// # Panics
    /// If no piece is at the source index.
    pub fn do_move(&mut self, mv: Move) {
        let (src_idx, hit_idx) = mv;
        let src_ins = match self.replace_pos(src_idx, None) {
            Some(i) => i,
            None => panic!(
                "cannot execute move '{:?}' because there is no piece at the source index",
                mv
            ),
        };

        self.remove_old_en_passant_moves();
        // Adds en passant moves for the next turn
        self.check_and_add_en_passant_eligibility(&src_ins, src_idx, hit_idx);
        // Execute en passant moves for this turn
        self.check_and_execute_en_passant(&src_ins, hit_idx);

        if src_ins.piece == Piece::King {
            match src_ins.color {
                Color::Black => {
                    self.can_black_castle_king_side = false;
                    self.can_black_castle_queen_side = false;
                }
                Color::White => {
                    self.can_white_castle_king_side = false;
                    self.can_white_castle_queen_side = false;
                }
            }
        }

        if src_ins.piece == Piece::Rook {
            match (&src_ins.color, src_idx) {
                (Color::Black, 0) => self.can_black_castle_queen_side = false,
                (Color::Black, 7) => self.can_black_castle_king_side = false,
                (Color::White, 56) => self.can_white_castle_queen_side = false,
                (Color::White, 63) => self.can_white_castle_king_side = false,
                _ => (),
            }
        }

        self.check_and_execute_castle(&src_ins, src_idx, hit_idx);

        self.set(hit_idx, Some(src_ins));
    }

    pub fn get(&self, idx: usize) -> &Option<PieceInstance> {
        &self.poses[idx]
    }

    /// Get the direction ([`DIR_NORTH`]/[`DIR_SOUTH`]) in which the pieces are
    /// attacking. Basically the opposite side of where the pieces started.
    pub fn get_attack_dir_of(color: &Color) -> usize {
        match color {
            Color::Black => DIR_SOUTH,
            Color::White => DIR_NORTH,
        }
    }

    pub fn get_mut(&mut self, idx: usize) -> Option<&mut PieceInstance> {
        self.poses[idx].as_mut()
    }

    pub fn is_pos_attacked_by(&self, pos_idx: usize, atk_color: &Color) -> bool {
        for (iter, pos) in self.poses.iter().enumerate() {
            let ins = match pos {
                Some(i) => i,
                None => continue,
            };

            // BUG: Recursive check for `is_pos_attacked_by`.
            // The king moves check (for castling) if any of the squares involved
            // in the castling are attacked by the opponent.
            // The king is thus currently excluded from the check, as it would just
            // keep going back and forth between the two kings.
            if ins.piece == Piece::King {
                continue;
            }

            if &ins.color != atk_color {
                continue;
            }

            for (_, hit_idx) in Piece::get_moves_of_piece_at(iter, self) {
                if pos_idx == hit_idx {
                    return true;
                }
            }
        }

        false
    }

    pub fn new(you_color: Color, opponent_color: Color) -> Self {
        // https://github.com/rust-lang/rust/issues/44796
        const INIT_POS: Option<PieceInstance> = None;
        Self {
            can_black_castle_king_side: true,
            can_black_castle_queen_side: true,
            can_white_castle_king_side: true,
            can_white_castle_queen_side: true,
            opponent_color,
            piece_eligible_for_en_passant: Vec::with_capacity(2),
            poses: [INIT_POS; Self::SIZE as usize],
            promote_idx: None,
            you_color,
        }
    }

    pub fn new_with_standard_formation(you_color: Color, opponent_color: Color) -> Self {
        let mut board = Self::new(you_color, opponent_color);

        // Standard chess formation:
        board.set(0, Some(PieceInstance::new(Color::Black, Piece::Rook)));
        board.set(1, Some(PieceInstance::new(Color::Black, Piece::Knight)));
        board.set(2, Some(PieceInstance::new(Color::Black, Piece::Bishop)));
        board.set(3, Some(PieceInstance::new(Color::Black, Piece::Queen)));
        board.set(4, Some(PieceInstance::new(Color::Black, Piece::King)));
        board.set(5, Some(PieceInstance::new(Color::Black, Piece::Bishop)));
        board.set(6, Some(PieceInstance::new(Color::Black, Piece::Knight)));
        board.set(7, Some(PieceInstance::new(Color::Black, Piece::Rook)));

        board.set(8, Some(PieceInstance::new(Color::Black, Piece::Pawn)));
        board.set(9, Some(PieceInstance::new(Color::Black, Piece::Pawn)));
        board.set(10, Some(PieceInstance::new(Color::Black, Piece::Pawn)));
        board.set(11, Some(PieceInstance::new(Color::Black, Piece::Pawn)));
        board.set(12, Some(PieceInstance::new(Color::Black, Piece::Pawn)));
        board.set(13, Some(PieceInstance::new(Color::Black, Piece::Pawn)));
        board.set(14, Some(PieceInstance::new(Color::Black, Piece::Pawn)));
        board.set(15, Some(PieceInstance::new(Color::Black, Piece::Pawn)));

        board.set(48, Some(PieceInstance::new(Color::White, Piece::Pawn)));
        board.set(49, Some(PieceInstance::new(Color::White, Piece::Pawn)));
        board.set(50, Some(PieceInstance::new(Color::White, Piece::Pawn)));
        board.set(51, Some(PieceInstance::new(Color::White, Piece::Pawn)));
        board.set(52, Some(PieceInstance::new(Color::White, Piece::Pawn)));
        board.set(53, Some(PieceInstance::new(Color::White, Piece::Pawn)));
        board.set(54, Some(PieceInstance::new(Color::White, Piece::Pawn)));
        board.set(55, Some(PieceInstance::new(Color::White, Piece::Pawn)));

        board.set(56, Some(PieceInstance::new(Color::White, Piece::Rook)));
        board.set(57, Some(PieceInstance::new(Color::White, Piece::Knight)));
        board.set(58, Some(PieceInstance::new(Color::White, Piece::Bishop)));
        board.set(59, Some(PieceInstance::new(Color::White, Piece::Queen)));
        board.set(60, Some(PieceInstance::new(Color::White, Piece::King)));
        board.set(61, Some(PieceInstance::new(Color::White, Piece::Bishop)));
        board.set(62, Some(PieceInstance::new(Color::White, Piece::Knight)));
        board.set(63, Some(PieceInstance::new(Color::White, Piece::Rook)));

        board
    }

    /// Fullfil the outstanding promotion.
    ///
    /// Promote a pawn that has reached the end of the board to the specified piece.
    /// Possibilities to promote to are:
    /// - [`Piece::Bishop`]
    /// - [`Piece::Knight`]
    /// - [`Piece::Queen`]
    /// - [`Piece::Rook`]
    pub fn promote_piece_to(&mut self, promote_to: Piece) {
        assert!(
            matches!(
                promote_to,
                Piece::Bishop | Piece::Knight | Piece::Queen | Piece::Rook,
            ),
            "pawn cannot be promoted to '{:?}'",
            promote_to
        );

        let idx = self
            .promote_idx
            .expect("cannot promote as no outstanding promotion was detected");

        let ins = match self.get(idx) {
            Some(i) => i.clone(),
            None => panic!("no piece to promote at '{}'", idx),
        };

        assert!(
            matches!(ins.piece, Piece::Pawn),
            "can only promote pawns but piece ('{}') was '{:?}'",
            idx,
            ins.piece,
        );

        self.set(idx, Some(PieceInstance::new(ins.color, promote_to)));

        self.promote_idx = None
    }

    fn remove_old_en_passant_moves(&mut self) {
        self.piece_eligible_for_en_passant.clear()
    }

    /// Replaced a given `idx` on the board with a given `val`.
    ///
    /// The replaced value will be returned.
    fn replace_pos(&mut self, idx: usize, val: Option<PieceInstance>) -> Option<PieceInstance> {
        mem::replace(&mut self.poses[idx], val)
    }

    pub fn set(&mut self, idx: usize, ins: Option<PieceInstance>) {
        self.poses[idx] = ins;
    }
}

#[derive(Clone, Debug, PartialEq, Eq)]
pub struct PieceInstance {
    pub color: Color,
    pub piece: Piece,
    pub was_moved: bool,
}

impl PieceInstance {
    pub fn new(color: Color, piece: Piece) -> Self {
        Self {
            piece,
            color,
            was_moved: false,
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn en_passant_removes_the_other_piece_you() {
        let mut board = board();
        board.set(8, ins_black(Piece::Pawn));
        board.set(25, ins_white(Piece::Pawn));

        board.do_move((8, 24));
        board.do_move((25, 16));

        assert!(
            matches!(board.get(24), None),
            "piece was not removed {}",
            board
        );
    }

    #[test]
    fn en_passant_removes_the_other_piece_opponent() {
        let mut board = board();
        board.set(33, ins_black(Piece::Pawn));
        board.set(48, ins_white(Piece::Pawn));

        board.do_move((48, 32));
        board.do_move((33, 40));

        assert!(
            matches!(board.get(32), None),
            "piece was not removed {}",
            board
        );
    }

    #[test]
    fn en_passant_is_not_done_for_other_pieces() {
        let mut board = board();
        board.set(33, ins_black(Piece::Bishop));
        board.set(32, ins_white(Piece::Pawn));

        board.do_move((33, 40));

        assert!(
            !matches!(board.get(32), None),
            "piece was removed {}",
            board
        );
    }

    #[test]
    fn en_passant_is_not_executed_on_normal_take() {
        let mut board = board();
        board.set(33, ins_white(Piece::Pawn));
        board.set(34, ins_black(Piece::Pawn));
        board.set(41, ins_white(Piece::Pawn));

        board.do_move((34, 41));

        assert!(
            !matches!(board.get(33), None),
            "piece was removed {}",
            board
        );
    }

    #[test]
    fn castle_moves_the_rook_you_west() {
        let mut board = board_castle_you_west();

        board.do_move((60, 58));

        assert_eq!(
            board.get(56).as_ref(),
            None,
            "rook was not removed {}",
            board,
        );

        assert_eq!(
            board.get(59).as_ref(),
            ins_white(Piece::Rook).as_ref(),
            "rook was not moved {}",
            board
        );
    }

    #[test]
    fn castle_moves_the_rook_you_east() {
        let mut board = board_castle_you_east();

        board.do_move((60, 62));

        assert_eq!(
            board.get(63).as_ref(),
            None,
            "rook was not removed {}",
            board,
        );

        assert_eq!(
            board.get(61).as_ref(),
            ins_white(Piece::Rook).as_ref(),
            "rook was not moved {}",
            board,
        );
    }

    #[test]
    fn castle_moves_the_rook_opponent_west() {
        let mut board = board();
        board.set(0, ins_black(Piece::Rook));
        board.set(4, ins_black(Piece::King));

        board.do_move((4, 2));

        assert_eq!(
            board.get(0).as_ref(),
            None,
            "rook was not removed {}",
            board,
        );

        assert_eq!(
            board.get(3).as_ref(),
            ins_black(Piece::Rook).as_ref(),
            "rook was not moved {}",
            board,
        );
    }

    #[test]
    fn castle_moves_the_rook_opponent_east() {
        let mut board = board();
        board.set(4, ins_black(Piece::King));
        board.set(7, ins_black(Piece::Rook));

        board.do_move((4, 6));

        assert_eq!(
            board.get(7).as_ref(),
            None,
            "rook was not removed {}",
            board,
        );

        assert_eq!(
            board.get(5).as_ref(),
            ins_black(Piece::Rook).as_ref(),
            "rook was not moved {}",
            board
        );
    }

    #[test]
    fn castle_only_moves_the_correct_rook_west() {
        let mut board = board_castle_you_west();
        board.set(63, ins_white(Piece::Rook));

        board.do_move((60, 58));

        assert_eq!(
            board.get(63).as_ref(),
            ins_white(Piece::Rook).as_ref(),
            "east rook was moved {}",
            board,
        );
    }

    #[test]
    fn castle_only_moves_the_correct_rook_east() {
        let mut board = board_castle_you_east();
        board.set(56, ins_white(Piece::Rook));

        board.do_move((60, 62));

        assert_eq!(
            board.get(56).as_ref(),
            ins_white(Piece::Rook).as_ref(),
            "west rook was moved {}",
            board,
        );
    }

    #[test]
    fn castle_does_not_happen_on_normal_king_moves() {
        let mut board = board();
        board.set(56, ins_white(Piece::Rook));
        board.set(60, ins_white(Piece::King));

        board.do_move((60, 59));

        assert_eq!(
            board.get(56).as_ref(),
            ins_white(Piece::Rook).as_ref(),
            "rook was removed",
        );
    }

    #[test]
    fn castle_move_is_not_done_for_other_pieces() {
        let mut board = board();
        board.set(56, ins_white(Piece::Rook));
        board.set(60, ins_white(Piece::Queen));

        board.do_move((60, 58));

        assert_eq!(
            board.get(56).as_ref(),
            ins_white(Piece::Rook).as_ref(),
            "rook was replaced {}",
            board
        );
    }

    fn board_castle_you_west() -> Board {
        let mut board = board();
        board.set(56, ins_white(Piece::Rook));
        board.set(60, ins_white(Piece::King));
        board
    }

    fn board_castle_you_east() -> Board {
        let mut board = board();
        board.set(60, ins_white(Piece::King));
        board.set(63, ins_white(Piece::Rook));
        board
    }

    /// Note that the instance is created with `was_moved = true`.
    fn ins_black(piece: Piece) -> Option<PieceInstance> {
        ins(Color::Black, piece)
    }

    /// Note that the instance is created with `was_moved = true`.
    fn ins_white(piece: Piece) -> Option<PieceInstance> {
        ins(Color::White, piece)
    }

    /// Note that the instance is created with `was_moved = true`.
    fn ins(color: Color, piece: Piece) -> Option<PieceInstance> {
        let mut ins = PieceInstance::new(color, piece);
        ins.was_moved = true;

        Some(ins)
    }

    fn board() -> Board {
        Board::new(Color::Black, Color::White)
    }
}
